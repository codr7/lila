* convert stack to bare array
** rename print-object to dump-stack
*** use in repl
** grep items/*stack*
* --
* add arg types to lib funs
** add support for short type names
*** extract get-type-id from define-type
* add neg/abs(num) funs
** map to (- ...) and (abs ...)
* fib_rec
** add fun op
*** add support for fun arg types
*** let as foo[X Y] & add to list foo
**** use lisp-class as arg type in defmethod
** add if macro
*** add if op
** add < fun
** add + fun
** add - fun
* add list literals
** (...)
* add quote support
** trigger on ' in reader
** call (quote val)
*** stored as (cons 'quote val)
** add quote type
** adapt list methods to handle quotes
* add check macro
** check {= foo 42}
* add test/suite.lila
* add lisp read-macro
** add do-lisp op
** add read macros
** trigger in read-id
** single form
** do-lisp (+ 1 2)
* add recall op
** optional fun arg
*** call self if arg is _
** (return ((lisp-id f) pos ...))
* add -compile switch
** dump lisp code
+* add do-lila reader macro
** read vals until next char is #\)
* ---
* add lila-thread plugin
** plugin.lisp/(link)
** use sbcl threads
** add thread/chan types
