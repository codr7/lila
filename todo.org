* add list lib with push/pop/len funs
* add sum types
** Foo|Bar|Baz
*** use derive-class
* add assignment
** foo = 42
** check that binding exists at emit
** expand to (setf)
* add fib_iter bench
* --
* add lambda support
** gensym id if _
** return fun from macro   
* add value dispatch
** use eql-specifier with gensym unless arg is sym or pair & first is sym
** fun fib(0) {0}
* add Str type
** add reader support
** add Str interpolation
*** %{...}
*** parse as expr
*** emit code to generate str
* add -emit-lisp/asm commandline args
* add quote support
** trigger on ' in reader
** call (quote val)
*** stored as (cons 'quote val)
** add quote type
** adapt list methods to handle quotes

* add lisp read-macro
** add do-lisp op
** add read macros
** trigger in read-id
** single form
** do-lisp (+ 1 2)
** dump lisp code
* ---
* add fun refs
** &foo
* add macro refs
** &bar
** generate (lambda (x y) (foo x y))
* add separate fun instance foo[...] 
** add support for [...] in read-id
** use find-method to get imp

* add packages
** package foo (exports)
** create package if not exists
** auto in-package
*** use cl/lila
** export lisp-ids
** add import foo (ids)
** special case dot access for packages
*** emit as package:xxx
* add Time type
** use local-time
** add now/today funs
** add *time-format*
* add ordered set
** new-set {'foo 'bar}
** new-map {'foo 1 'bar 2}
** new-id-map {foo 1 bar 2}
* add do-lila reader macro
** read vals until next char is #\)
* ---
* add lila-crypt plugin
** libsodium
** plugin.lisp
* add threads
** use sbcl threads
** add thread/chan types
