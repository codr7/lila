(mapcar #'sb-mop:method-lambda-list 
        (sb-mop:generic-function-methods (symbol-function 'COMPILE-OP)))

(with-env () (with-stack () (funcall (test-load))))

* extract clock macro to util.lisp
* var a:b:c:d:e:f:g 1:2:3:4:5:6:7
* add main fn
** load files from argv
* add build script for executable
* add repl
** launch from main if no files
* add -out switch
** create executable
* --
* add do-lila reader macro
** read vals until next char is #\)
* add lisp read-macro
** add do-lisp op
** add read macros
** trigger in read-id
** single form
** do-lisp (+ 1 2)
* add fun op
** add support for fun arg types
*** use lisp-class as arg type in defmethod
* add recall op
** optional fun arg
*** call self is arg is _
** (return ((lisp-id f) pos ...))
* ---
* add lila-thread plugin
** plugin.lisp/(link)
** use sbcl threads
** add thread/chan types
