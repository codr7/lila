* add types to readme
** add type-of/is-a funs
* add recall macro
** optional fun arg
*** call self if arg is _
** emit (return (call f ...))
* add fib_tail bench
* add sum types
** Foo|Bar|Baz
*** use sb-mop:add-direct-subclass
* add separate fun instance foo[...] 
** add support for [...] in read-id
** use find-method to get imp
* return fun from macro if _ id
** gensym id

* add value dispatch
** use eql-specifier with gensym unless arg is sym or pair & first is sym
** fun fib1(0) {0}
* add fun refs
** &foo
* add macro refs
** &bar
** generate (lambda (x y) (foo x y))
* ---
* add Time type
** use local-time
** add now/today funs
** add *time-format*
* add ordered set
** new-set {'foo 'bar}
** new-map {'foo 1 'bar 2}
** new-id-map {foo 1 bar 2}
* add quote support
** trigger on ' in reader
** call (quote val)
*** stored as (cons 'quote val)
** add quote type
** adapt list methods to handle quotes
* add check macro
** check {= foo 42}
* add test/suite.lila
* add lisp read-macro
** add do-lisp op
** add read macros
** trigger in read-id
** single form
** do-lisp (+ 1 2)
* add -compile switch
** dump lisp code
+* add do-lila reader macro
** read vals until next char is #\)
* ---
* add lila-thread plugin
** plugin.lisp/(link)
** use sbcl threads
** add thread/chan types
